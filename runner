#!/usr/bin/env ruby -wKU

##
# We want this to run for a certian amount of time
# pulling the log files from a speific app
# and then run some analysis on them
#
# Find things like # of H12's, # of dyno restarts
# Longest running transactions, and most importantly the
# 99.9, 99 and 50 percentile transaction times
##

require './lib/prereqs.rb'

##
# Pull in command line switches
##

opts = Trollop::options do
  banner 'Pull and get stats from Heroku logs
  
  Usage:
    runner [options]
    where [options] are:'

  opt :sudo, "Run with sudo. Requires the sudo plugin. (Default: False)", :default => false
  opt :screen, "Display to the screen. (Default: False)", :default => false, :short => "f"
  opt :app, "App Name to pull logs for.", :type => String
  opt :time, "Number of minutes to pull logs for.", :default => 5
  opt :log_file, "optional log file to proccess by hand", :type => String
  opt :bell, "Tell you that the run is completed", :default => false
end

##
# Settings
##

percentile_targets = [0.999, 0.990,0.950,0.900,0.750,0.500,0.250,0.100,0.050,0.010,0.001]
app = opts.app
time = opts.time.to_i
sudo = opts.sudo
screen = opts.screen
log_file = opts.log_file
start_time = Time.now().to_s
bell = opts.bell
os = `uname`.chomp

# check that we have a good app name and that we have access to it
Trollop::die :app, "must exist" if app.nil?

if log_file.nil?
  if sudo
    runner_string = "heroku sudo "
  else
    runner_string = "heroku "
  end
  
  `#{runner_string} info -a #{app} &> /dev/null`

  if $?.exitstatus == 1
    Trollop::die :app, "Appname is incorrect or you do not have access to it" 
  end

  puts "grabbing " + time.to_s + " minutes of logs from the app called " + app
end
##
# Generate a log file
##

if log_file.nil? 
  puts "starting run"
  file_name = log_pull(sudo, app, time, os)
else
  file_name = log_file
end  
  
##
# Build out a log run
##
puts "building out the report"
report = "Performance Report for " + app + "\nGenerated between " + start_time + " and "+ Time.now().to_s + "\n"
report << log_parser(file_name,percentile_targets, time)

##
# Dump a report
##
if screen
  printf report
else
  puts "generating the report"
  File.open(file_name + ".report.txt", 'w') do |f|
      f << report
  end
  puts "you should find it in a file called " + file_name + ".report.txt"
end

if bell
  if os == "Darwin"
    `say "The report for #{app} is done"`
  else
    `beep`
  end
end
